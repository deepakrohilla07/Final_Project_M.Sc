import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

def blackbody_spectrum(wavelengths, temperature):
    # Constants
    h = 6.62607015e-34  
    c = 2.99792458e8    
    k = 1.38064852e-23  

    wavelengths = wavelengths * 1e-9


    numerator = 2 * h * c ** 2
    exponent = (h * c) / (wavelengths * k * temperature)
    denominator = wavelengths ** 5 * ((np.exp(exponent) - 1))
    spectral_radiance = numerator / denominator

    
    spectrum = dict(zip(wavelengths, spectral_radiance))

    return spectrum

def plot_blackbody_spectrum(spectrum):
    
    
    wavelengths = np.array(list(spectrum.keys()))
    spectral_radiance = np.array(list(spectrum.values()))

    # Plot the spectrum
    plt.plot(wavelengths, spectral_radiance)
    plt.xlabel('Wavelength (nm)')
    plt.ylabel('Spectral Radiance')
    plt.title('Blackbody Spectrum')
    plt.show()

# Example usage
wavelength_range = np.linspace(400, 780, 780)  # Wavelength range in nanometers
temperature = 5000  # Temperature in Kelvin

spectrum = blackbody_spectrum(wavelength_range, temperature)
plot_blackbody_spectrum(spectrum)




dataset= blackbody_spectrum(wavelength_range, temperature)
dataset


wavelength= list(dataset.keys())
#print(wavelength)

spectral_radiance= list(dataset.values())


df = pd.DataFrame(dataset.items(), columns=['wavelength', 'spectral_radiance'])
df = df.explode('spectral_radiance')
print(df)

def read_sdss_spectrum(wavelength, flux):
    #wavelengths = df[:, 0]    # Wavelength values
    #flux = data[:, 2]           # Flux values

    # Normalize the flux values to obtain a probability distribution
    probabilities = flux / np.sum(flux)

    # Create a list of tuples to store the spectrum
    spectrum = list(zip(wavelength, probabilities))

    return spectrum
    
    
    
output= read_sdss_spectrum(wavelength, spectral_radiance)
print(output)




dataframe= pd.DataFrame(output, columns= ["wavelengths", "probabilities"])


import random
import numpy as np

def generate_simulated_photons(spectrum, num_photons):
    simulated_photons = []

    wavelengths, probabilities = zip(*spectrum)
    cumulative_probabilities = np.cumsum(probabilities)

    for _ in range(num_photons):
        random_num = random.random()
        wavelength = wavelengths[np.searchsorted(cumulative_probabilities, random_num)]
        energy = 1240 / wavelength  # Convert wavelength to energy in eV
        simulated_photons.append((wavelength, energy))

    return simulated_photons


def main():
    spectrum = [(500, 0.3), (600, 0.5), (700, 0.2)]  # Example spectrum
    num_photons = 100

    simulated_photons = generate_simulated_photons(spectrum, num_photons)
    print(simulated_photons)


if __name__ == '__main__':
    main()
